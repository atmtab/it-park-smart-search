// API DeepSeek –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
class DeepSeekAPI {
  constructor(apiKey = 'sk-a6d23ddc253540ba8d0b4ca0ebb95ef0') {
    this.apiKey = apiKey;
    this.baseURL = 'https://api.deepseek.com/v1/chat/completions';
    this.isAvailable = true; // –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  }

  async searchCompanies(query, miniData) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      if (!this.isAvailable) {
        console.log('üîÑ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–∏—Å–∫');
        return this.fallbackSearch(query, miniData);
      }

      const prompt = this.buildPrompt(query, miniData);
      
      console.log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API...');
      console.log('üìù –ó–∞–ø—Ä–æ—Å:', query);
      console.log('üåê URL:', this.baseURL);
      console.log('üîë API Key:', this.apiKey ? '***' + this.apiKey.slice(-4) : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      
      const requestBody = {
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É IT-–∫–æ–º–ø–∞–Ω–∏–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –∏ –Ω–∞—Ö–æ–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 500,
        temperature: 0.3
      };
      
      console.log('üì§ Request Body:', JSON.stringify(requestBody, null, 2));
      
      const response = await fetch(this.baseURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify(requestBody)
      });

      console.log('üì° HTTP Status:', response.status);
      console.log('üì° HTTP Status Text:', response.statusText);
      console.log('üì° Response Headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå HTTP Error Response:', errorText);
        throw new Error(`API Error: ${response.status} - ${response.statusText}. Response: ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç DeepSeek API –ø–æ–ª—É—á–µ–Ω');
      console.log('üìÑ Response Data:', JSON.stringify(data, null, 2));
      
      return this.parseResponse(data, miniData);
    } catch (error) {
      console.error('‚ùå DeepSeek API Error:', error);
      console.error('üîç –¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
      console.error('üîç –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('üîç Stack:', error.stack);
      
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      this.isAvailable = false;
      console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...');
      
      return this.fallbackSearch(query, miniData);
    }
  }

  // Fallback –ø–æ–∏—Å–∫ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  fallbackSearch(query, miniData) {
    console.log('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
    
    const normalizedQuery = query.toLowerCase();
    const results = [];
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    miniData.companies.forEach(company => {
      let score = 0;
      
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      if (company.name.toLowerCase().includes(normalizedQuery)) {
        score += 3;
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
      company.sectors.forEach(sector => {
        const sectorName = miniData.sector_mapping[sector] || sector;
        if (sectorName.toLowerCase().includes(normalizedQuery)) {
          score += 2;
        }
      });
      
      // –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É
      const focalName = miniData.focal_mapping[company.focal] || company.focal;
      if (focalName.toLowerCase().includes(normalizedQuery)) {
        score += 4;
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
      if (company.rating.toLowerCase().includes(normalizedQuery)) {
        score += 1;
      }
      
      if (score > 0) {
        results.push({ company, score });
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    results.sort((a, b) => b.score - a.score);
    
    const companies = results.map(r => this.getFullCompanyData([r.company.id], miniData)[0]).filter(Boolean);
    
    return {
      text: `–ù–∞–π–¥–µ–Ω–æ ${companies.length} –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}". –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (API DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).`,
      companies: companies
    };
  }

  buildPrompt(query, miniData) {
    const companiesText = miniData.companies.map(company => 
      `ID: ${company.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${company.name}, –°–µ–∫—Ç–æ—Ä—ã: ${company.sectors.join(', ')}, –°—Ç–∞—Ç—É—Å: ${company.status}, –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${company.focal}, –†–µ–π—Ç–∏–Ω–≥: ${company.rating}`
    ).join('\n');

    return `–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${query}"

–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:
${companiesText}

–°–µ–∫—Ç–æ—Ä—ã (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞):
${Object.entries(miniData.sector_mapping).map(([key, value]) => `${key} = ${value}`).join(', ')}

–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞:
${Object.entries(miniData.focal_mapping).map(([key, value]) => `${key} = ${value}`).join(', ')}

–ó–∞–¥–∞—á–∞: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–π–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "text": "–ö—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å",
  "company_ids": [—Å–ø–∏—Å–æ–∫ ID –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π]
}

–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –æ–±—ä—è—Å–Ω—è—Ç—å, –ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω—ã —ç—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏.`;
  }

  parseResponse(apiResponse, miniData) {
    try {
      const content = apiResponse.choices[0]?.message?.content;
      if (!content) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      }

      console.log('üìÑ –û—Ç–≤–µ—Ç API:', content);

      // –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', parsed);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ ID
      const companies = this.getFullCompanyData(parsed.company_ids || [], miniData);
      
      return {
        text: parsed.text || '–ö–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã',
        companies: companies
      };
    } catch (error) {
      console.error('‚ùå Parse Error:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API: ${error.message}`);
    }
  }

  getFullCompanyData(companyIds, miniData) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    return companyIds.map(id => {
      const company = miniData.companies.find(c => c.id === id);
      if (company) {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–Ω–∏-–¥–∞–Ω–Ω—ã—Ö
        return {
          id: company.id,
          name: `OOO ¬´${company.name}¬ª`,
          sector: company.sectors.map(s => miniData.sector_mapping[s] || s),
          status: company.status,
          region: company.status === 'resident' ? '–†–µ–∑–∏–¥–µ–Ω—Ç IT-Park —Å 03.12.2019' : '–õ–∏–¥ ‚Ä¢ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
          contact: '+998XXXXXXXXX',
          extra: `–†–µ–π—Ç–∏–Ω–≥ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: ${company.rating}`,
          focal: miniData.focal_mapping[company.focal] || company.focal
        };
      }
      return null;
    }).filter(Boolean);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  async checkAvailability() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DeepSeek API...');
      console.log('üåê URL:', this.baseURL);
      console.log('üîë API Key:', this.apiKey ? '***' + this.apiKey.slice(-4) : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ HEAD –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const response = await fetch(this.baseURL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: [
            {
              role: 'user',
              content: 'test'
            }
          ],
          max_tokens: 5
        })
      });
      
      console.log('üì° HTTP Status:', response.status);
      console.log('üì° HTTP Status Text:', response.statusText);
      
      this.isAvailable = response.ok;
      
      if (response.ok) {
        console.log('‚úÖ DeepSeek API –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        console.log('‚ùå DeepSeek API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. Status:', response.status);
      }
      
      return this.isAvailable;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ DeepSeek API:', error);
      console.error('üîç –¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
      console.error('üîç –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      
      this.isAvailable = false;
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = DeepSeekAPI;
} else {
  window.DeepSeekAPI = DeepSeekAPI;
}
